function(count_tests filename countvar)
  file(STRINGS ${filename} contents LIMIT_COUNT 1)
  string(REPLACE "// Arguments: " "${empty_string}" contents ${contents})
  string(REGEX REPLACE "[ ,]+" ";" contents "${contents}")

  set(count 1)
  foreach(type ${contents})
    string(TOLOWER ${type} type)
    if(${type} STREQUAL "int")
      math(EXPR count "${count}*1")
    elseif(${type} STREQUAL "double")
      math(EXPR count "${count}*2")
    elseif(${type} STREQUAL "ints")
      math(EXPR count "${count}*4")
    elseif(${type} STREQUAL "doubles")
      math(EXPR count "${count}*8")
    else()
      message(ERROR "Unrecognized type: ${type} in test header ${filename}")
    endif()
  endforeach()
  math(EXPR srccount "${count}/100 + 1")
  set(${countvar} ${srccount} PARENT_SCOPE)
endfunction(count_tests)

function(gen_test_srcs hdrname numtests srcvar)
  math(EXPR test_range "${numtests} - 1")
  foreach(testnum RANGE 0 ${test_range})
    if(testnum LESS 10)
      string(REPLACE "_test.hpp" "_0000${testnum}_generated_test.cpp" curr_src ${hdrname})
    elseif(testnum LESS 100)
      string(REPLACE "_test.hpp" "_000${testnum}_generated_test.cpp" curr_src ${hdrname})
    elseif(testnum LESS 1000)
      string(REPLACE "_test.hpp" "_00${testnum}_generated_test.cpp" curr_src ${hdrname})
    elseif(testnum LESS 10000)
      string(REPLACE "_test.hpp" "_0${testnum}_generated_test.cpp" curr_src ${hdrname})
    else()
      string(REPLACE "_test.hpp" "_${testnum}_generated_test.cpp" curr_src ${hdrname})
    endif()
    list(APPEND SRCS "${curr_src}")
  endforeach()
  set(${srcvar} ${SRCS} PARENT_SCOPE)
endfunction(gen_test_srcs)

function(add_stan_gtest groupname source)
  string(REPLACE ".cpp" "${empty_string}" executable ${source})
  string(REPLACE "/"  "_" executable ${executable})
  string(REPLACE "\\"  "_" executable ${executable})
  string(TOLOWER "${groupname}" groupname_l)
  set(executable ${groupname_l}_${executable})
  add_executable(${executable} ${source})
  target_link_libraries(${executable} stan stanc ${GTEST_LIBRARIES})
  add_test(${groupname}
           ${RUNCMD} ${CMAKE_CURRENT_BINARY_DIR}/${executable} --gtest_output=xml:${executable}.xml)
endfunction(add_stan_gtest)
